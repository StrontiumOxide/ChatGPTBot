from aiogram import Router, types as tp
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from time import time as timer
from random import choice
from main_logic_bot.greetings import kb_greetings as kb
from utils.states import DialogGPTState
from functions.api_gpt import ConnectGPT

from main_logic_bot.dialog_gpt import kb_dialog_gpt as kb

router = Router(name='message_dialog_gpt')


async def check_text(message: tp.Message) -> bool | None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""

    if not message.text:
        await message.answer(text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ üòí')
        return True
    

async def check_content(message: tp.Message, state: FSMContext) -> bool | None:
    """–§—É–Ω–∫—Ü–∏—è –≤—Å—Ç—Ä–µ—á–∞–µ—Ç –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–æ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—â–µ–Ω–∏–µ —Å ChatGPT"""

    text = f'''
‚ö†Ô∏è <b>–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!</b> ‚ö†Ô∏è
–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –µ—â—ë!
'''
    
    if message.text == '–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ–±—â–µ–Ω–∏–µ ‚ùå':
        await message.answer(
            text=text,
            reply_markup=kb.reply.remove
        )

        await state.clear()
        return True


@router.message(Command(commands=['start_conversation']))
async def start_conversation_handler(message: tp.Message, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start_conversation"""

    text = f'''
‚ö†Ô∏è <b>–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞!</b> ‚ö†Ô∏è

–ß—Ç–æ–±—ã ChatGPTBot –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–ª –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –≤–∞–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–≥–æ —Ä–æ–ª—å –≤ –±–µ—Å–µ–¥–µ. üí¨

–≠—Ç–æ –ø–æ–≤—ã—Å–∏—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ç–µ—Ä–µ—Å –æ–±—â–µ–Ω–∏—è. ‚ÑπÔ∏è

–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ —Ä–æ–ª–µ–π –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é, —á—Ç–æ–±—ã ChatGPTBot –ª—É—á—à–µ –ø–æ–Ω—è–ª –≤–∞—à–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∏ —Å–¥–µ–ª–∞–ª–æ –¥–∏–∞–ª–æ–≥ –±–æ–ª–µ–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º. ü•≥ 

–î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –Ω–∞—à–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º! ‚¨áÔ∏è
'''
    
    await message.answer(
        text=text,
        reply_markup=kb.reply.create_kb_profeccion()
    )

    await state.set_state(DialogGPTState.role)


@router.message(DialogGPTState.role)
async def get_role(message: tp.Message, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é —Ä–æ–ª–∏ –¥–ª—è ChatGPT"""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if await check_text(message=message): return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—â–µ–Ω–∏—è
    if await check_content(message=message, state=state): return
    
    # await state.update_data(role=message.text)

    random_word = choice(['–û—Ç–ª–∏—á–Ω–æ!', '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!', '–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä!', '–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!'])
    text = f'''
{random_word} ü•≥

–†–æ–ª—å ChatGPT - <b>{message.text}</b>

–ò–ò –æ–∂–∏–¥–∞–µ—Ç –≤–∞—Å‚ùóÔ∏è –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è üòå
'''

    await message.answer(
        text=text,
        reply_markup=kb.reply.cancel_request
    )

    await state.update_data(history=[{'role': "user", 'content': f'–¢–≤–æ—è —Ä–æ–ª—å: {message.text}. –£—Ä–æ–≤–µ–Ω—å —Ç–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π!'}])
    await state.set_state(DialogGPTState.request)


@router.message(DialogGPTState.request)
async def get_request(message: tp.Message, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–µ—Ä–µ–¥–∞—á–∞ ChatGPT"""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if await check_text(message=message): return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—â–µ–Ω–∏—è
    if await check_content(message=message, state=state): return

    await send_request(message=message, state=state)


async def send_request(message: tp.Message, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞ ChatGPT"""

    data: dict = await state.get_data()
    history: list = data.get('history')

    msg = await message.answer(
        text='<b>ChatGPT</b> –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç...'
    )

    start_time = timer()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞–º ChatGPT
    client = ConnectGPT(GPT_TOKEN='chad-007cca7c7747490093ce6f7958b050a3c3bbt0xn')
    response = await client.send_query_gpt(query=message.text, history=history)

    delta_time = round(timer() - start_time, 2)  

    await answer_user(
        message=msg,
        state=state,
        query=message.text,
        response=response,
        delta_time=delta_time,
        history=history
    )


async def answer_user(message: tp.Message, state: FSMContext, query: str, response: dict, delta_time: int, history: list) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""

    if response == None:
        response_text = '''–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, —è –Ω–µ —Å–º–æ–≥ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä–∞–º ChatGPT üòû
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë üòâ'''

    elif response.get('is_success'):
        response_text = response.get('response')

        history.append(
            {'role': "user", 'content': query}
        )
        history.append(
            {'role': "system", 'content': response_text}
        )

        await state.update_data(history=history)

    else:
        response_text = f'''ChatGPT –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É üòû
–ö–æ–¥: {response.get('error_code')}
–°–æ–æ–±—à–µ–Ω–∏–µ: {response.get('error_message')}
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å üòâ'''

    text = f'''
<b>–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å üí†</b>

<blockquote><pre>{response_text}</pre></blockquote>

<b>–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:</b> <i>{delta_time} —Å–µ–∫—É–Ω–¥(—ã) ‚è≥</i>
'''
    try:
        await message.edit_text(
            text=text
        )     
    except TelegramBadRequest:
        await message.edit_text(
            text='<i>–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–∏–ª—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º...</i>'
        )
