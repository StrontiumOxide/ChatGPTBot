from aiogram import Router, types as tp, F
from aiogram.fsm.context import FSMContext
from utils.states import ChanheAsseccState, ChanheAsseccState_v2
from utils.config import gpt_access
from main_logic_bot.change_access import kb_change_access as kb

router = Router(name='callback_query_change_access')


async def check_text(message: tp.Message) -> bool | None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""

    if not message.text:
        await message.answer(text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ üòí')
        return True
    

@router.callback_query(F.data == 'add_user')
async def change_access_handler(callback: tp.CallbackQuery, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_data = add_user"""

    await callback.answer()
    await callback.message.answer(
        text='–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§'
    )

    await state.set_state(ChanheAsseccState.name)


@router.message(ChanheAsseccState.name)
async def get_name(message: tp.Message, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if await check_text(message=message): return

    await state.update_data(name=message.text)

    await message.answer(
        text='–ù–∞–ø–∏—à–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üÜî'
    )

    await state.set_state(ChanheAsseccState.user_id)


@router.message(ChanheAsseccState.user_id)
async def get_user_id(message: tp.Message, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if await check_text(message=message): return

    data: dict = await state.get_data()
    name = data.get('name')

    try:
        user_id = int(message.text)
    except ValueError:  
        await message.answer(
            text='–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Ü–∏—Ñ—Ä—É!'
        )
        return
    
    gpt_access[user_id] = name

    await message.answer(
        text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ'
    )

    await state.clear()


@router.callback_query(F.data == 'remove_user')
async def change_access_handler(callback: tp.CallbackQuery, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_data = remove_user"""

    if not gpt_access:
        await callback.answer(
            text='–ù–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ ChatGPT üö´',
            show_alert=True
        )
        return
    
    await callback.answer()
    await callback.message.answer(
        text='–ö–æ–º—É –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø‚ùì',
        reply_markup=kb.reply.created_kb_user()
    )

    await state.set_state(ChanheAsseccState_v2.name)


@router.message(ChanheAsseccState_v2.name)
async def get_user_delete(message: tp.Message, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""

    try:
        name, user_id = message.text.split(sep=' - ')
    except ValueError:
        await message.answer(
            text='–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ üö´'
        )
        return
    
    if int(user_id) in gpt_access:
        del gpt_access[int(user_id)]
        await state.clear()
        text = f'–í—ã –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>"{name}"</b> –¥–æ—Å—Ç—É–ø –∫ ChatGPT!'
    else:
        text = '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç üö´'

    await message.answer(
            text=text,
            reply_markup=kb.reply.remove
        )
